<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -2000;
x = display_get_width() / 2 - 680;
y = display_get_height() / 2;

if (file_exists("lang.txt")) {
    file = file_text_open_read("lang.txt");
    language = file_text_read_real(file);
    file_text_close(file);
 }
  else {
      file = file_text_open_write("lang.txt");
      file_text_write_real(file, 0);
      file_text_close(file);
  }

switch (language) {
    case 0 : {
        menuGameButton[0] = "Continue";
        menuGameButton[1] = "Menu";
        menuGameButton[2] = "Close the game";

    }
    break;
    
    case 1 : {
        menuGameButton[0] = "Продолжить";
        menuGameButton[1] = "Меню";
        menuGameButton[2] = "Выйти из игры";

    }
    break;
    
    default : break;
}


space = 64;
mpos = 0;
i = 0;

x = 160;
y = 544;

instance_deactivate_object(obj_inGameMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepadSupport();

var move = 0;

if (global.defeat == false) {

if (global.gamepad_realCount &gt; 0) {
    move -= max(gamepad_button_check_pressed(current_id, gp_padu), mouse_wheel_up(), 0);
    move += max(gamepad_button_check_pressed(current_id, gp_padd), mouse_wheel_down(), 0);
 }

move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), mouse_wheel_up(), 0);
move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), mouse_wheel_down(), 0);

if (move != 0) {
   mpos += move;
   audio_play_sound(snd_buttonRollOver, 0, false);
   
   if (mpos &lt; 0) mpos = array_length_1d(menuGameButton) - 1;
   if (mpos &gt; array_length_1d(menuGameButton) - 1) mpos = 0;
 }
 
var push;

if (global.gamepad_realCount &gt; 0){
   push = max(keyboard_check_released(vk_enter), keyboard_check_released(vk_space), gamepad_button_check_released(current_id, gp_face1), keyboard_check_released(vk_space), mouse_check_button_released(mb_left), 0);
 }
  else {
     push = max(keyboard_check_released(vk_enter), keyboard_check_released(vk_space), mouse_check_button_released(mb_left), 0);
  }

if (push == 1) {
   audio_play_sound(snd_buttonClick, 0, false);
   menuInGameScript();
 }   
 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(font_menu);
draw_set_color(c_white);
draw_set_alpha(1);
draw_set_color(c_white);

var m;

/*for (m = 0; m &lt; array_length_1d(menuGameButton); m++) {
    draw_text(x + space, y + (m * space), string(menuGameButton[m]));
}
*/
draw_sprite(spr_arrow, 0, x - 16, y + mpos * space);

draw_set_color(c_white);

draw_set_alpha(0.9);

for (m = 0; m &lt; array_length_1d(menuGameButton); m++) {
    draw_text(x + space, y + (m * space), string(menuGameButton[m]));
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
